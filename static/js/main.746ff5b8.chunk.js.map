{"version":3,"sources":["serviceWorker.ts","components/util/canvas.ts","components/GameCanvas.tsx","components/EvolutionPlot.tsx","components/Help.tsx","logic/Node.ts","logic/util/misc.ts","logic/Board.ts","logic/util/types.ts","logic/util/geometry.ts","logic/Snake.ts","logic/ScoreService.ts","logic/Brain.ts","logic/Game.ts","logic/Evolver.ts","components/StatCard.tsx","components/StatCards.tsx","components/Controls.tsx","components/App.tsx","index.tsx","components/NotFound.tsx"],"names":["Boolean","window","location","hostname","match","hex2rgba","hex","a","r","parseInt","slice","g","b","GameCanvas","props","game","unitWidth","unitHeight","canvas","ctx","addCallback","display","bind","width","columns","height","rows","React","createRef","this","clearRect","speed","Infinity","displayFastForward","displayGame","save","fillStyle","font","textAlign","fillText","restore","displayGrid","visibleSnakes","forEach","snake","displaySnake","displayFruit","displayWalls","fruit","row","col","context","x","y","opacity","positionHasOverlap","board","get","color","beginPath","moveTo","lineTo","closePath","fill","positions","index","length","ellipse","Math","PI","rect","strokeStyle","lineWidth","stroke","c","min","walls","node","position","snakes","size","fruits","objects","i","has","current","getContext","className","ref","Component","Plot","createPlotlyComponent","Plotly","EvolutionPlot","evolver","postGen","scores","map","max","setState","generations","state","generation","removeCallback","data","type","line","shape","smoothing","layout","xaxis","title","fixedrange","rangemode","yaxis","margin","l","t","pad","config","displayModeBar","App","handleClose","console","log","continue","showModal","handleShow","pause","Tooltip","placement","arrow","IconButton","aria-label","onClick","Modal","show","onHide","dialogClassName","Header","closeButton","Title","Body","href","role","Footer","Button","variant","Node","isWall","Set","clear","sleep","ms","Promise","resolve","setTimeout","time","f","start","Date","getTime","Board","grid","freeSpaces","Array","from","_","add","removeWalls","clearObjects","removeWall","deltas","adjacentNodes","adjacent_row","adjacent_col","outOfBounds","push","addFruit","delete","deleteFruit","getRandomFreeSpace","snakeFreeSpaces","s","floor","random","choice","p","addWall","direction","positionToStr","manhattanDistance","p1x","p1y","p2x","p2y","abs","positionDiff","origin","dest","value","axis","vectorAngle","vx","vy","atan2","directionsList","directions","findIndex","d","Snake","id","score","alive","history","brain","seed","rng","seedrandom","toString","String","toUpperCase","replace","rgb","substr","round","generateColor","Map","network","brainConstructor","turn","activate","Error","getHead","hx","hy","getVector","extendTo","shift","head_row","head_col","addHistory","positionStr","previousCount","set","newFruit","FruitsScoreService","move","DefaultScoreService","Brain","thisClass","constructor","input","inputSize","output","outputSize","inputs","getInputs","arr","maxIndex","angle","cos","sin","rotateAxis","distance","px","py","hasObstacle","NaN","relativeFruitPosition","distanceToObstacle","distanceToFruit","fruitAngle","CloseObstaclesAndFruitVectorBrain","args","maxDistance","fruitPosition","inverseDistanceToObstacle","signedProximity","dist","absoluteDistance","normDist","DefaultBrain","Game","callbacks","aliveSnakes","iteration","sleepTime","moveSnake","getMove","scoreService","getMoveScore","died","killSnake","to","eatFruit","addSnakePosition","oldTail","removeSnakePosition","defaultProps","onMove","onEnd","addRandomWalls","initSnakes","setSpeed","spawnMargin","isEmpty","wallDensity","updateVisibleSnakes","filter","fps","updateState","event","callback","createSnake","addSnake","neuralNetworks","setBrains","setBrain","brainType","moveFunction","elapsedTime","hadWalls","perimeter","vertices","distanceToPosition","vertex","nextVertex","startDistance","snakeLength","squarePosition","squareDirection","getHistoryCount","think","getNextPosition","shouldKillSnake","aSnake","Evolver","params","neat","preGen","defaultParams","neatap","evaluatePopulation","popsize","elitism","mutationRate","mutationAmount","fitnessPopulation","Perceptron","cb","population","run","evolve","sortPopulation","reset","StatCard","Card","CardContent","Typography","gutterBottom","content","StatCards","preGenHandler","postGenHandler","generationHighScore","highScore","Controls","toggleFastForward","fastForward","target","checked","onFastForwardToggle","sliderHandler","_event","onSpeedChange","handleSnakeSelect","onSnakeSelect","toggleWalls","onWallsToggle","defaults","speedSlider","Slider","valueLabelFormat","valueLabelDisplay","defaultValue","onChange","disabled","fastForwardSwitch","Switch","snakeVisibilitySelect","Select","MenuItem","wallSwitch","defaultChecked","FormGroup","FormControlLabel","label","control","labelPlacement","speedChangeHandler","fastForwardHandler","newSpeed","snakeSelectHandler","setVisibleSnakes","wallsHandler","ReactDOM","render","basename","process","path","exact","component","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.746ff5b8.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","// Convert a hex color to rgba\r\nexport function hex2rgba(hex: string, a: number) {\r\n  const r = parseInt(hex.slice(1, 3), 16);\r\n  const g = parseInt(hex.slice(3, 5), 16);\r\n  const b = parseInt(hex.slice(5, 7), 16);\r\n  return `rgba(${r}, ${g}, ${b}, ${a})`;\r\n}\r\n\r\n// Trace a diamond shape\r\nexport function traceDiamond(\r\n  context: CanvasRenderingContext2D,\r\n  // x, y: Top left corner of the shape\r\n  x: number,\r\n  y: number,\r\n  width: number,\r\n  height: number,\r\n) {\r\n  context.beginPath();\r\n  // left\r\n  context.moveTo(x, y + height / 2);\r\n  // top\r\n  context.lineTo(x + width / 2, y);\r\n  // right\r\n  context.lineTo(x + width, y + height / 2);\r\n  // bottom\r\n  context.lineTo(x + width / 2, y + height);\r\n  context.closePath();\r\n}\r\n","import React from \"react\";\r\nimport Game from \"../logic/Game\";\r\nimport Node from \"../logic/Node\";\r\nimport Snake from \"../logic/Snake\";\r\nimport { hex2rgba, traceDiamond } from \"./util/canvas\";\r\n\r\ninterface Props {\r\n  game: Game;\r\n  width: number; // canvas width (px)\r\n  height: number; // canvas height (px)\r\n  snakes?: number; // snakes to display (undefined = all snakes)\r\n}\r\n\r\nexport default class GameCanvas extends React.Component<Props, {}> {\r\n  game: Game;\r\n  unitWidth: number;\r\n  unitHeight: number;\r\n  canvas: React.RefObject<HTMLCanvasElement>;\r\n  ctx: CanvasRenderingContext2D | undefined;\r\n\r\n  constructor(props: Props) {\r\n    super(props);\r\n    this.game = this.props.game; // alias\r\n    this.game // Event handlers\r\n      .addCallback(\"onMove\", this.display.bind(this))\r\n      .addCallback(\"onEnd\", this.display.bind(this));\r\n    this.unitWidth = this.props.width / this.game.props.columns;\r\n    this.unitHeight = this.props.height / this.game.props.rows;\r\n    this.canvas = React.createRef<HTMLCanvasElement>();\r\n  }\r\n\r\n  display() {\r\n    let ctx = this.ctx!;\r\n    ctx.clearRect(0, 0, this.props.width, this.props.height);\r\n\r\n    if (this.game.props.speed === Infinity) {\r\n      this.displayFastForward();\r\n    } else {\r\n      this.displayGame();\r\n    }\r\n  }\r\n\r\n  displayFastForward() {\r\n    let ctx = this.ctx!;\r\n    ctx.save();\r\n    ctx.fillStyle = \"#333333\";\r\n    ctx.font = \"bold 36px sans-serif\";\r\n    ctx.textAlign = \"center\";\r\n    ctx.fillText(\"Fast Forwarding\", this.props.width / 2, this.props.height / 2);\r\n    ctx.font = \"16px sans-serif\";\r\n    ctx.fillText(\r\n      \"(Snakes are training in the background)\",\r\n      this.props.width / 2,\r\n      this.props.height / 2 + 40\r\n    );\r\n    ctx.restore();\r\n  }\r\n\r\n  displayGame() {\r\n    this.displayGrid();\r\n    this.game.visibleSnakes.forEach((snake) => {\r\n      this.displaySnake(snake);\r\n      this.displayFruit(snake);\r\n    });\r\n    this.displayWalls();\r\n  }\r\n\r\n  displayFruit(snake: Snake) {\r\n    if (!snake.fruit) return;\r\n    const [row, col] = snake.fruit;\r\n    let ctx = this.ctx!;\r\n\r\n    ctx.save();\r\n    // const opacity = this.game.board.get([row, col])!.fruits.size > 1 ? 0.4 : 1;\r\n    const opacity = this.positionHasOverlap(this.game.board.get([row, col])!) ? 0.4 : 1;\r\n    ctx.fillStyle = hex2rgba(snake.color, opacity);\r\n    traceDiamond(ctx, col * this.unitWidth, row * this.unitWidth, this.unitWidth, this.unitHeight);\r\n    ctx.fill();\r\n    ctx.restore();\r\n  }\r\n\r\n  displaySnake(snake: Snake) {\r\n    let ctx = this.ctx!;\r\n    ctx.save();\r\n    snake.positions.forEach(([row, col], index, positions) => {\r\n      if (index === positions.length - 1) {\r\n        ctx.beginPath();\r\n        ctx.ellipse(\r\n          col * this.unitWidth + this.unitWidth / 2,\r\n          row * this.unitHeight + this.unitHeight / 2,\r\n          this.unitWidth / 2,\r\n          this.unitHeight / 2,\r\n          0,\r\n          0,\r\n          Math.PI * 2\r\n        );\r\n        ctx.closePath();\r\n      } else {\r\n        ctx.beginPath();\r\n        ctx.rect(col * this.unitWidth, row * this.unitHeight, this.unitWidth, this.unitHeight);\r\n        ctx.closePath();\r\n      }\r\n      // const opacity = this.game.board.get([row, col])!.snakes.size > 1 ? 0.4 : 1;\r\n      const opacity = this.positionHasOverlap(this.game.board.get([row, col])!) ? 0.4 : 1;\r\n      ctx.fillStyle = hex2rgba(snake.color, opacity);\r\n      ctx.strokeStyle = \"#ffffff\";\r\n      ctx.lineWidth = 2;\r\n      ctx.fill();\r\n      ctx.stroke();\r\n    });\r\n    ctx.restore();\r\n  }\r\n\r\n  displayGrid() {\r\n    let ctx = this.ctx!;\r\n    ctx.save();\r\n    ctx.beginPath();\r\n    for (var c = 0; c <= this.game.props.columns; c++) {\r\n      let x = Math.min(c * this.unitWidth + 0.5, this.props.width - 0.5);\r\n      ctx.moveTo(x, 0);\r\n      ctx.lineTo(x, this.props.height);\r\n    }\r\n    for (var r = 0; r <= this.game.props.rows; r++) {\r\n      let y = Math.min(r * this.unitHeight + 0.5, this.props.height - 0.5);\r\n      ctx.moveTo(0, y);\r\n      ctx.lineTo(this.props.width, y);\r\n    }\r\n    ctx.strokeStyle = \"rgba(180, 180, 180, 0.4)\";\r\n    ctx.stroke();\r\n    ctx.restore();\r\n  }\r\n\r\n  displayWalls() {\r\n    let ctx = this.ctx!;\r\n    ctx.save();\r\n    ctx.strokeStyle = \"#000000\";\r\n    ctx.fillStyle = \"#ff0000\";\r\n    ctx.lineWidth = 2;\r\n\r\n    this.props.game.board.walls.forEach((node) => {\r\n      const [row, col] = node.position;\r\n      ctx.beginPath();\r\n      ctx.rect(col * this.unitWidth, row * this.unitHeight, this.unitWidth, this.unitHeight);\r\n      ctx.closePath();\r\n      ctx.fill();\r\n      ctx.stroke();\r\n    });\r\n    ctx.restore();\r\n  }\r\n\r\n  // Returns true if there is more than one snake or fruit in the same position; false otherwise\r\n  private positionHasOverlap(node: Node) {\r\n    if (node.snakes.size < 2 && node.fruits.size < 2) return false;\r\n    let objects = 0;\r\n    for (let i = 0; i < this.game.visibleSnakes.length; i++) {\r\n      const snake = this.game.visibleSnakes[i];\r\n      if (node.snakes.has(snake)) objects++;\r\n      if (node.fruits.has(snake)) objects++;\r\n\r\n      if (objects > 1) return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.ctx = this.canvas.current!.getContext(\"2d\")!;\r\n    this.display();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <canvas\r\n        className=\"game\"\r\n        ref={this.canvas}\r\n        width={this.props.width}\r\n        height={this.props.height}\r\n      />\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport Evolver from \"../logic/Evolver\";\r\nimport Plotly, { Data, Layout, Config } from \"plotly.js\";\r\nimport createPlotlyComponent from \"react-plotly.js/factory\";\r\n\r\nconst Plot = createPlotlyComponent(Plotly);\r\n\r\ninterface Props {\r\n  evolver: Evolver;\r\n}\r\n\r\ninterface State {\r\n  generations: number[];\r\n  max: number[];\r\n  // avg: number[];\r\n}\r\n\r\nexport default class EvolutionPlot extends React.Component<Props, State> {\r\n  evolver: Evolver;\r\n\r\n  constructor(props: Props) {\r\n    super(props);\r\n    this.evolver = props.evolver;\r\n    this.state = {\r\n      generations: [],\r\n      max: [],\r\n      // avg: []\r\n    };\r\n  }\r\n\r\n  private postGen = () => {\r\n    const scores = this.evolver.game.snakes.map((snake) => snake.fruits);\r\n    // const avg = scores.reduce((sum, score) => sum + score, 0) / scores.length;\r\n    const max = Math.max(...scores);\r\n    this.setState({\r\n      generations: [...this.state.generations, this.evolver.generation],\r\n      max: [...this.state.max, max],\r\n      // avg: [...this.state.avg, avg]\r\n    });\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.evolver.addCallback(\"postGen\", this.postGen);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.evolver.removeCallback(\"postGen\", this.postGen);\r\n  }\r\n\r\n  render() {\r\n    const data: Data[] = [\r\n      {\r\n        type: \"scatter\",\r\n        x: this.state.generations,\r\n        y: this.state.max,\r\n        line: { shape: \"spline\", smoothing: 1.5 },\r\n      },\r\n    ];\r\n    const layout: Partial<Layout> = {\r\n      xaxis: { title: \"Generation\", fixedrange: true, rangemode: \"nonnegative\" },\r\n      yaxis: { title: \"Score\", fixedrange: true, rangemode: \"nonnegative\" },\r\n      margin: {\r\n        l: 40,\r\n        r: 20,\r\n        b: 40,\r\n        t: 20,\r\n        pad: 4,\r\n      },\r\n    };\r\n    const config: Partial<Config> = {\r\n      displayModeBar: false,\r\n    };\r\n\r\n    return <Plot className=\"evolution-plot\" data={data} layout={layout} config={config} />;\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport { FaQuestionCircle } from \"react-icons/fa\";\r\nimport { Tooltip, IconButton } from \"@material-ui/core\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Game from \"../logic/Game\";\r\n\r\ninterface Props {\r\n  game: Game;\r\n}\r\n\r\ninterface State {\r\n  showModal: boolean;\r\n}\r\n\r\nexport default class App extends React.Component<Props, State> {\r\n  constructor(props: Props) {\r\n    super(props);\r\n    this.state = {\r\n      showModal: false,\r\n    };\r\n  }\r\n\r\n  handleClose = () => {\r\n    console.log(\"close\");\r\n    this.props.game.continue();\r\n    this.setState({ showModal: false });\r\n  };\r\n  handleShow = () => {\r\n    console.log(\"show\");\r\n    this.props.game.pause();\r\n    this.setState({ showModal: true });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"help\">\r\n        <Tooltip title=\"What's this?\" placement=\"right\" arrow>\r\n          <IconButton color=\"primary\" aria-label=\"what's this\" onClick={this.handleShow}>\r\n            <FaQuestionCircle className=\"help-icon\" />\r\n          </IconButton>\r\n        </Tooltip>\r\n\r\n        <Modal show={this.state.showModal} onHide={this.handleClose} dialogClassName=\"help-modal\">\r\n          <Modal.Header closeButton>\r\n            <Modal.Title>What&apos;s this?</Modal.Title>\r\n          </Modal.Header>\r\n          <Modal.Body className=\"help-modal-body\">\r\n            <p>\r\n              This is a visualization of bots learning to play the classic game of{\" \"}\r\n              <span className=\"bold\">Snake</span> via <span className=\"bold\">Neuroevolution</span>.\r\n              You&apos;ll notice that there are multiple snakes on screen. That&apos;s due to the\r\n              nature of the neuroevolution algorithm, inspired by Darwin&apos;s theory of evolution.\r\n              Although snakes play the game independently from each other, they are part of a\r\n              competing population, following the concept of{\" \"}\r\n              <span className=\"bold\">survival of the fittest</span>. Each snake has its own way of\r\n              playing the game, and the better they are at it, the more likely they and their\r\n              offspring are to advance to the next <span className=\"bold\">generation</span> (i.e.\r\n              the next game). Similarly, snakes that do not perform well are gradually eliminated\r\n              from the population. As generations progress, the score of the population tends to\r\n              improve, allowing us to discover (hopefully) good strategies for playing the game,\r\n              even if not optimal.\r\n            </p>\r\n            <p>\r\n              Game instructions:\r\n              <ul>\r\n                <li>The goal is to get as many diamonds as possible, each awarding 1 point.</li>\r\n                <li>\r\n                  Snakes do not collide with each other and can only collect their own diamonds.\r\n                </li>\r\n                <li>\r\n                  <span className=\"red\">Red blocks</span> are obstacles. They can be toggled on or\r\n                  off at any time with the switch on the right-hand side.\r\n                </li>\r\n              </ul>\r\n            </p>\r\n            <p>\r\n              This project uses <a href=\"https://github.com/wagenaartje/neataptic\">Neataptic</a>\r\n              &apos;s implementation of the{\" \"}\r\n              <a href=\"http://nn.cs.utexas.edu/downloads/papers/stanley.ec02.pdf\">NEAT</a>{\" \"}\r\n              algorithm.\r\n            </p>\r\n            <p>\r\n              For more details, check <a href=\"https://github.com/PPinto22/snake-evolver\">GitHub</a>\r\n              .{\" \"}\r\n              <span role=\"img\" aria-label=\"snake emoji\">\r\n                🐍\r\n              </span>\r\n            </p>\r\n          </Modal.Body>\r\n          <Modal.Footer>\r\n            <Button variant=\"primary\" onClick={this.handleClose}>\r\n              OK\r\n            </Button>\r\n          </Modal.Footer>\r\n        </Modal>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import Snake from \"./Snake\";\r\nimport { Position } from \"./util/types\";\r\n\r\nexport default class Node {\r\n  position: Position;\r\n  isWall: boolean;\r\n  snakes: Set<Snake>;\r\n  fruits: Set<Snake>;\r\n\r\n  constructor(position: Position, isWall = false) {\r\n    this.position = position;\r\n    this.isWall = isWall;\r\n    this.snakes = new Set<Snake>();\r\n    this.fruits = new Set<Snake>();\r\n  }\r\n\r\n  hasObstacle(snake: Snake): boolean {\r\n    return this.isWall || this.snakes.has(snake);\r\n  }\r\n\r\n  isEmpty(): boolean {\r\n    return !this.isWall && this.snakes.size === 0 && this.fruits.size === 0;\r\n  }\r\n\r\n  clearObjects() {\r\n    this.snakes.clear();\r\n    this.fruits.clear();\r\n    this.isWall = false;\r\n  }\r\n}\r\n","import seedrandom from \"seedrandom\";\r\n\r\nexport function choice<T>(s: Array<T>): T | undefined {\r\n  if (s.length === 0) return;\r\n\r\n  const random_i = Math.floor(Math.random() * s.length);\r\n  return s[random_i];\r\n}\r\n\r\nexport function sleep(ms: number): Promise<void> {\r\n  return new Promise((resolve) => setTimeout(resolve, ms));\r\n}\r\n\r\n// Returns a pair [index, value] of the max element in an array\r\nexport function max(arr: number[]): [number, number] | undefined {\r\n  if (arr.length === 0) return;\r\n  var max = arr[0];\r\n  var maxIndex = 0;\r\n  for (var i = 1; i < arr.length; i++) {\r\n    if (arr[i] > max) {\r\n      maxIndex = i;\r\n      max = arr[i];\r\n    }\r\n  }\r\n  return [maxIndex, max];\r\n}\r\n\r\nexport function sum(arr: number[]): number {\r\n  let sum = 0;\r\n  arr.forEach((num) => (sum += num));\r\n  return sum;\r\n}\r\n\r\n// Multiplies each value in arr1 with arr2\r\nexport function multiply(arr1: number[], arr2: number[]): number[] | undefined {\r\n  if (arr1.length !== arr2.length) return;\r\n  return arr1.map((value, index) => value * arr2[index]);\r\n}\r\n\r\n// Execute a function and measure the elapsed time in milliseconds\r\nexport function time<T>(f: () => T): [T, number] {\r\n  const start = new Date().getTime();\r\n  const result = f();\r\n  const end = new Date().getTime();\r\n  const elapsed = end - start;\r\n  return [result, elapsed];\r\n}\r\n\r\n// Source: https://www.sitepoint.com/javascript-generate-lighter-darker-color/\r\nexport function generateColor(seed?: string) {\r\n  const rng = seedrandom(seed?.toString());\r\n  var lum = -0.20;\r\n  var hex = String('#' + rng().toString(16).slice(2, 8).toUpperCase()).replace(/[^0-9a-f]/gi, '');\r\n  if (hex.length < 6) {\r\n      hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];\r\n  }\r\n  var rgb = \"#\",\r\n      c, i;\r\n  for (i = 0; i < 3; i++) {\r\n      c = parseInt(hex.substr(i * 2, 2), 16);\r\n      c = Math.round(Math.min(Math.max(0, c + (c * lum)), 255)).toString(16);\r\n      rgb += (\"00\" + c).substr(c.length);\r\n  }\r\n  return rgb;\r\n}","import Node from \"./Node\";\r\nimport { Position, Direction, Vector } from \"./util/types\";\r\nimport Snake from \"./Snake\";\r\nimport { choice } from \"./util/misc\";\r\n\r\nexport default class Board {\r\n  private grid: Node[][];\r\n  rows: number;\r\n  columns: number;\r\n  walls: Set<Node>;\r\n  freeSpaces: Set<Node>;\r\n\r\n  constructor(rows: number, columns: number) {\r\n    this.rows = rows;\r\n    this.columns = columns;\r\n    this.grid = Array.from({ length: rows }, (_, row) => {\r\n      return Array.from({ length: columns }, (_, col) => {\r\n        return new Node([row, col]);\r\n      });\r\n    });\r\n    this.walls = new Set<Node>();\r\n    // Add all non-wall nodes as free space\r\n    this.freeSpaces = new Set<Node>();\r\n    this.grid.map((row) => row.map((node) => !node.isWall && this.freeSpaces.add(node)));\r\n  }\r\n\r\n  clearObjects() {\r\n    this.removeWalls();\r\n    this.grid.forEach((row) =>\r\n      row.forEach((node) => {\r\n        node.clearObjects();\r\n      })\r\n    );\r\n  }\r\n\r\n  removeWalls() {\r\n    this.walls.forEach((node) => {\r\n      this.removeWall(node.position);\r\n    });\r\n  }\r\n\r\n  get(position?: Position): Node | undefined {\r\n    if (!position) return undefined;\r\n    const [row, col] = position;\r\n    return this.grid[row]?.[col];\r\n  }\r\n\r\n  getAdjacent([row, col]: Position): Node[] {\r\n    const deltas = [0, 1, 0, -1, 0];\r\n    let adjacentNodes: Node[] = [];\r\n    for (let i = 0; i < 4; i++) {\r\n      const adjacent_row = row + deltas[i];\r\n      const adjacent_col = col + deltas[i + 1];\r\n      if (!this.outOfBounds([adjacent_row, adjacent_col])) {\r\n        adjacentNodes.push(this.grid[adjacent_row][adjacent_col]);\r\n      }\r\n    }\r\n    return adjacentNodes;\r\n  }\r\n\r\n  addSnake(snake: Snake) {\r\n    snake.positions.forEach(([row, col]) => {\r\n      this.grid[row][col].snakes.add(snake);\r\n    });\r\n    if (snake.fruit) this.addFruit(snake, snake.fruit);\r\n  }\r\n\r\n  deleteSnake(snake: Snake) {\r\n    snake.positions.forEach(([row, col]) => {\r\n      this.grid[row][col].snakes.delete(snake);\r\n    });\r\n    if (snake.fruit) this.deleteFruit(snake, snake.fruit);\r\n  }\r\n\r\n  addSnakePosition(snake: Snake, [row, col]: Position) {\r\n    this.grid[row][col].snakes.add(snake);\r\n  }\r\n\r\n  removeSnakePosition(snake: Snake, [row, col]: Position) {\r\n    this.grid[row][col].snakes.delete(snake);\r\n  }\r\n\r\n  addFruit(snake: Snake, position = this.getRandomFreeSpace(snake)): Position | undefined {\r\n    if (!position) return; // No available positions\r\n    const [row, col] = position;\r\n    this.grid[row][col].fruits.add(snake);\r\n    return position;\r\n  }\r\n\r\n  deleteFruit(snake: Snake, [row, col]: Position) {\r\n    this.grid[row][col].fruits.delete(snake);\r\n  }\r\n\r\n  getRandomFreeSpace(snake?: Snake): Position | undefined {\r\n    let snakeFreeSpaces = new Set(this.freeSpaces);\r\n    if (snake) {\r\n      snake.positions.forEach(([row, col]) => {\r\n        const node = this.grid[row][col];\r\n        snakeFreeSpaces.delete(node);\r\n      });\r\n    }\r\n    return choice(Array.from(snakeFreeSpaces).map((node) => node.position));\r\n  }\r\n\r\n  addWall([row, col]: Position) {\r\n    const node = this.grid[row][col];\r\n    node.isWall = true;\r\n    this.walls.add(node);\r\n    this.freeSpaces.delete(node);\r\n  }\r\n\r\n  removeWall([row, col]: Position) {\r\n    const node = this.grid[row][col];\r\n    node.isWall = false;\r\n    this.walls.delete(node);\r\n    this.freeSpaces.add(node);\r\n  }\r\n\r\n  toggleWall(p: Position): boolean {\r\n    const node = this.grid[p[0]][p[1]];\r\n    node.isWall ? this.removeWall(p) : this.addWall(p);\r\n    return node.isWall;\r\n  }\r\n\r\n  outOfBounds([row, col]: Position): boolean {\r\n    return row < 0 || col < 0 || row >= this.rows || col >= this.columns;\r\n  }\r\n\r\n  static getVector(direction: Direction): Vector {\r\n    //  .---> cols (y)\r\n    //  |\r\n    //  |\r\n    //  V rows (x)\r\n    switch (direction) {\r\n      case \"up\":\r\n        return [-1, 0];\r\n      case \"down\":\r\n        return [1, 0];\r\n      case \"right\":\r\n        return [0, 1];\r\n      case \"left\":\r\n        return [0, -1];\r\n    }\r\n  }\r\n}\r\n","export type Direction = \"up\" | \"down\" | \"right\" | \"left\";\r\nexport type Turn = \"forward\" | \"left\" | \"right\";\r\nexport type Position = [number, number];\r\nexport type PositionStr = string;\r\nexport type Vector = [number, number];\r\nexport type Move = {\r\n  from: Position,\r\n  to: Position,\r\n  turn: Turn,\r\n  died: boolean,\r\n  fruit: boolean,\r\n}\r\n\r\nexport function positionToStr([x, y]: Position) : PositionStr {\r\n  return `(${x}, ${y})`;\r\n}","import { Position, Direction, Vector } from \"./types\";\r\n\r\nexport function manhattanDistance([p1x, p1y]: Position, [p2x, p2y]: Position): number {\r\n  return Math.abs(p1x - p2x) + Math.abs(p1y - p2y);\r\n}\r\n\r\n// Returns vector 'origin'->'dest'\r\nexport function positionDiff(origin: Position, dest: Position): Vector {\r\n  return dest.map((value, axis) => value - origin[axis]) as Vector;\r\n}\r\n\r\nexport function movePosition(origin: Position, vector: Vector): Position {\r\n  return origin.map((value, axis) => value + vector[axis]) as Position;\r\n}\r\n\r\n// Counter clockwise angle created by the input vector relative to [1, 0], in radians ([-pi, pi]). E.g:\r\n// vectorAngle([0, 1]) = pi/2\r\n// vectorAngle([0, -1]) = -pi/2\r\nexport function vectorAngle([vx, vy]: Vector | Position): number {\r\n  return Math.atan2(vy, vx);\r\n}\r\n\r\n// Get new coordinates of a vector or position on a new reference system\r\n// rotated counter clockwise by the given angle in radians. E.g.:\r\n// rotateAxis([2, 3], pi/2) = [3, -2]\r\nexport function rotateAxis([x, y]: Vector | Position, angle: number): Vector | Position {\r\n  return [x * Math.cos(angle) + y * Math.sin(angle), -x * Math.sin(angle) + y * Math.cos(angle)];\r\n}\r\n\r\n// Direction utilities\r\nconst directionsList: Direction[] = [\"up\", \"right\", \"down\", \"left\"];\r\n\r\nexport const directions = {\r\n  leftOf: (direction: Direction): Direction => {\r\n    return directionsList[(directionsList.findIndex(d => d === direction) + 3) % 4];\r\n  },\r\n\r\n  rightOf: (direction: Direction): Direction => {\r\n    return directionsList[(directionsList.findIndex(d => d === direction) + 1) % 4];\r\n  },\r\n\r\n  oppositeOf: (direction: Direction): Direction => {\r\n    return directionsList[(directionsList.findIndex(d => d === direction) + 2) % 4];\r\n  }\r\n};\r\n","import { Direction, Position, positionToStr, PositionStr, Turn } from \"./util/types\";\r\nimport Board from \"./Board\";\r\nimport Brain from \"./Brain\";\r\nimport { directions } from \"./util/geometry\";\r\nimport { generateColor } from \"./util/misc\";\r\n\r\nexport default class Snake {\r\n  // Details\r\n  id: number; // An ID used to generate a color\r\n  color: string; // A color in hex (e.g. #56eec7)\r\n  // Logic\r\n  positions: Position[]; // Pieces of the snake, ordered from tail to head\r\n  direction: Direction; // Direction the snake is moving\r\n  fruit?: Position; // Position of the fruit\r\n  // Scores and state\r\n  score: number; // Points (fitness)\r\n  fruits: number; // Nr. of fruits eaten\r\n  alive: boolean;\r\n  // Past positions of the head and respective count. Resets when a fruit is eaten. Useful to prevent infinite loops.\r\n  // E.g. \"(5, 10)\" -> 1, meaning the snake has been at position (5, 10) 1 time.\r\n  history: Map<PositionStr, number>;\r\n  // Neural network\r\n  brain?: Brain;\r\n\r\n  constructor(id: number, positions: Position[], direction: Direction, fruit?: Position) {\r\n    this.id = id;\r\n    this.color = generateColor(`seed ${this.id}`);\r\n    this.positions = positions;\r\n    this.direction = direction;\r\n    this.fruit = fruit;\r\n    this.fruits = 0;\r\n    this.score = 0;\r\n    this.history = new Map();\r\n    this.alive = true;\r\n  }\r\n\r\n  setBrain(network: any, board: Board, brainConstructor: new (...args: any[]) => Brain) {\r\n    this.brain = new brainConstructor(this, network, board);\r\n  }\r\n\r\n  think(): Turn {\r\n    const turn = this.brain?.activate();\r\n    switch (turn) {\r\n      case \"left\":\r\n        this.direction = directions.leftOf(this.direction);\r\n        break;\r\n      case \"right\":\r\n        this.direction = directions.rightOf(this.direction);\r\n        break;\r\n      case \"forward\":\r\n      default:\r\n        // do nothing\r\n    }\r\n    return turn || \"forward\";\r\n  }\r\n\r\n  getHead(): Position {\r\n    if (this.positions.length === 0) {\r\n      throw new Error(\"Empty snake\");\r\n    }\r\n    return this.positions[this.positions.length - 1];\r\n  }\r\n\r\n  getNextPosition(): Position {\r\n    const [hx, hy] = this.getHead();\r\n    const [vx, vy] = Board.getVector(this.direction);\r\n    return [hx + vx, hy + vy];\r\n  }\r\n\r\n  moveTo(position: Position): Position {\r\n    this.extendTo(position);\r\n    return this.positions.shift()!;\r\n  }\r\n\r\n  extendTo([row, col]: Position) {\r\n    const [head_row, head_col] = this.getHead();\r\n    const distance = Math.abs(head_row - row) + Math.abs(head_col - col);\r\n    if (distance > 1) {\r\n      throw new Error(\"Cannot move further than one unit\");\r\n    }\r\n    this.positions.push([row, col]);\r\n    this.addHistory([row, col]);\r\n  }\r\n\r\n  addHistory(position: Position) {\r\n    const positionStr = positionToStr(position);\r\n    const previousCount = this.history.get(positionStr) || 0;\r\n    this.history.set(positionStr, previousCount + 1);\r\n  }\r\n\r\n  getHistoryCount(position: Position): number {\r\n    return this.history.get(positionToStr(position)) || 0;\r\n  }\r\n\r\n  eatFruit(newFruit?: Position) {\r\n    this.fruit = newFruit;\r\n    this.fruits += 1;\r\n    this.history.clear();\r\n  }\r\n}\r\n","import Board from \"./Board\";\r\nimport Snake from \"./Snake\";\r\nimport { Move } from \"./util/types\";\r\nimport { positionDiff } from \"./util/geometry\";\r\nimport { multiply } from \"./util/misc\";\r\n\r\nexport default interface ScoreService {\r\n  // Evaluate how good the snake's last move was\r\n  getMoveScore(board: Board, snake: Snake, move: Move): number;\r\n}\r\n\r\n// If fruit eaten: SCORE_PER_FRUIT points;\r\n// Otherwise: award or penalize points if the snake is moving towards the fruit or opposite from it\r\nexport class AlignedDirectionScoreService implements ScoreService {\r\n  SCORES = {\r\n    FRUIT: 100,\r\n    MOVE_TOWARDS_FRUIT: 1,\r\n    MOVE_AGAINST_FRUIT: -1,\r\n  };\r\n\r\n  getMoveScore(board: Board, snake: Snake, move: Move): number {\r\n    if (move.died) return 0;\r\n    if (move.fruit) return this.SCORES.FRUIT;\r\n\r\n    return this.getAlignedDirectionScore(snake, move);\r\n  }\r\n\r\n  private getAlignedDirectionScore(snake: Snake, move: Move) {\r\n    if (!snake.fruit) return 0;\r\n    const fruitVector = positionDiff(move.to, snake.fruit!);\r\n    const movementVector = Board.getVector(snake.direction);\r\n    const rightWay = multiply(fruitVector, movementVector)!.every((value) => value >= 0);\r\n    return rightWay ? this.SCORES.MOVE_TOWARDS_FRUIT : this.SCORES.MOVE_AGAINST_FRUIT;\r\n  }\r\n}\r\n\r\n// Simply return 1 point per fruit\r\nexport class FruitsScoreService implements ScoreService {\r\n  getMoveScore(board: Board, snake: Snake, move: Move): number {\r\n    return move.fruit ? 1 : 0;\r\n  }\r\n}\r\n\r\nexport const DefaultScoreService = FruitsScoreService;\r\n","import Snake from \"./Snake\";\r\nimport Board from \"./Board\";\r\nimport { Vector, Position, Turn } from \"./util/types\";\r\nimport { max } from \"./util/misc\";\r\nimport {\r\n  manhattanDistance,\r\n  directions,\r\n  positionDiff,\r\n  rotateAxis,\r\n  vectorAngle,\r\n} from \"./util/geometry\";\r\n\r\nexport default abstract class Brain {\r\n  snake: Snake;\r\n  board: Board;\r\n  network: any;\r\n\r\n  // Constants\r\n  static inputSize = NaN; // Number of inputs. NOTE: Must be overriden!\r\n  static outputSize = 3; // Number of outputs. 0: forward; 1: left; 2: right\r\n\r\n  constructor(snake: Snake, network: any, board: Board) {\r\n    // Assert that the inputs and outputs of the network match Brain.inputSize and Brain.outputSize\r\n    const thisClass = this.constructor as typeof Brain;\r\n    if (network.input !== thisClass.inputSize || network.output !== thisClass.outputSize)\r\n      throw Error(\r\n        `The number of inputs or outputs defined in Brain do not match the neural network's.`\r\n      );\r\n\r\n    this.snake = snake;\r\n    this.network = network;\r\n    this.board = board;\r\n  }\r\n\r\n  // Calculates the inputs to feed into the neural network:\r\n  abstract getInputs(): number[];\r\n\r\n  // Activates the neural network and returns the change in direction\r\n  // Possibilities: turn left, turn right, continue forward\r\n  activate(): Turn {\r\n    this.network.clear();\r\n    const inputs = this.getInputs();\r\n    const outputs: [number, number, number] = this.network.activate(inputs);\r\n    const [index] = max(outputs)!;\r\n    switch (index) {\r\n      case 1:\r\n        return \"left\";\r\n      case 2:\r\n        return \"right\";\r\n      case 0:\r\n      default:\r\n        return \"forward\";\r\n    }\r\n  }\r\n\r\n  // Position of the fruit relative to the snake's head and movement\r\n  relativeFruitPosition(): Position | undefined {\r\n    if (!this.snake.fruit) return undefined;\r\n\r\n    const vector = positionDiff(this.snake.getHead(), this.snake.fruit); // vector head->fruit\r\n    // fruit's position relative to the snake's head and movement\r\n    const relativePosition: Position = rotateAxis(\r\n      vector,\r\n      vectorAngle(Board.getVector(this.snake.direction))\r\n    );\r\n    return relativePosition;\r\n  }\r\n\r\n  // Input: direction vector\r\n  distanceToObstacle([vx, vy]: Vector): number {\r\n    const [hx, hy] = this.snake.getHead();\r\n    let distance = 0;\r\n    do {\r\n      distance++;\r\n      var [px, py] = [hx + distance * vx, hy + distance * vy];\r\n    } while (\r\n      !this.board.outOfBounds([px, py]) &&\r\n      !this.board.get([px, py])!.hasObstacle(this.snake)\r\n    );\r\n    return manhattanDistance([hx, hy], [px, py]);\r\n  }\r\n\r\n  distanceToFruit(): number {\r\n    if (!this.snake.fruit) return NaN;\r\n    return manhattanDistance(this.snake.getHead(), this.snake.fruit);\r\n  }\r\n\r\n  // Returns the angle (between -1 and 1) of the fruit relative to the snake's movement.\r\n  // Positive angle: fruit is to the left of the snake\r\n  // Negative angle: fruit is to the right of the snake\r\n  fruitAngle(): number {\r\n    if (!this.snake.fruit) return NaN;\r\n    const relativePosition = this.relativeFruitPosition()!;\r\n    return vectorAngle(relativePosition) / Math.PI; // Angle of the fruit relative to the snake, squashed between -1 and 1.\r\n  }\r\n}\r\n\r\nexport class DistancesAndFruitAngleBrain extends Brain {\r\n  static inputSize = 5;\r\n\r\n  // 1. distance to nearest obstacle following the current direction\r\n  // 2. distance to nearest obstacle to the left of the current direction\r\n  // 3. distance to nearest obstacle to the right of the current direction\r\n  // 4. manhattan distance to fruit\r\n  // 5. fruit angle relative to the current direction\r\n  getInputs(): number[] {\r\n    return [\r\n      this.distanceToObstacle(Board.getVector(this.snake.direction)),\r\n      this.distanceToObstacle(Board.getVector(directions.leftOf(this.snake.direction))),\r\n      this.distanceToObstacle(Board.getVector(directions.rightOf(this.snake.direction))),\r\n      this.distanceToFruit(),\r\n      this.fruitAngle(),\r\n    ];\r\n  }\r\n}\r\n\r\nexport class CloseObstaclesAndFruitVectorBrain extends Brain {\r\n  static inputSize = 5;\r\n  maxDistance: number;\r\n\r\n  constructor(...args: [Snake, any, Board]) {\r\n    super(...args);\r\n    this.maxDistance = Math.max(this.board.columns, this.board.rows);\r\n  }\r\n\r\n  // 1. proximity of obstacle forward\r\n  // 2. proximity of obstacle to the left\r\n  // 3. proximity of obstacle to the right\r\n  // 4. proximity of fruit forward (+) or backward (-)\r\n  // 5. proximity of fruit to the left (+) or right (-)\r\n  getInputs(): number[] {\r\n    const fruitPosition: Position = this.relativeFruitPosition() || [NaN, NaN];\r\n    return [\r\n      this.inverseDistanceToObstacle(Board.getVector(this.snake.direction)),\r\n      this.inverseDistanceToObstacle(Board.getVector(directions.leftOf(this.snake.direction))),\r\n      this.inverseDistanceToObstacle(Board.getVector(directions.rightOf(this.snake.direction))),\r\n      this.signedProximity(fruitPosition[0]),\r\n      this.signedProximity(fruitPosition[1]),\r\n    ];\r\n  }\r\n\r\n  // Close obstacle -> ~1\r\n  // Distant obstacle -> ~0\r\n  private inverseDistanceToObstacle(direction: Vector): number {\r\n    const dist = this.distanceToObstacle(direction);\r\n    return 1 / dist ** 2;\r\n  }\r\n\r\n  // Step 1. Normalize distance to range [-1, 1], where -1/1 means max distance in either direction and ~0 means close\r\n  // Step 2. Invert \"distance\" to \"proximity\", where -1/1 means very close in either direction and ~0 means max distance\r\n  private signedProximity(absoluteDistance: number) {\r\n    const normDist = absoluteDistance / this.maxDistance;\r\n    return normDist >= 0 ? 1 - normDist : -1 - normDist;\r\n  }\r\n}\r\n\r\nexport const DefaultBrain = CloseObstaclesAndFruitVectorBrain;\r\n","import Board from \"./Board\";\r\nimport Snake from \"./Snake\";\r\nimport { Direction, Position, Move } from \"./util/types\";\r\nimport { sleep, time } from \"./util/misc\";\r\nimport ScoreService, { DefaultScoreService } from \"./ScoreService\";\r\nimport Brain, { DefaultBrain } from \"./Brain\";\r\n\r\ntype State = \"running\" | \"stopped\" | \"ended\";\r\ntype EventName = \"onMove\" | \"onEnd\";\r\n\r\nexport interface GameProps {\r\n  rows: number;\r\n  columns: number;\r\n  snakes: number;\r\n  visibleSnakes: number;\r\n  snakeLength: number;\r\n  spawnMargin: number;\r\n  wallDensity: number;\r\n  speed: number;\r\n  scoreService: ScoreService;\r\n  brainType: new (...args: any[]) => Brain;\r\n  neuralNetworks?: any[];\r\n}\r\n\r\ninterface Callbacks {\r\n  onMove: (() => void)[]; // List of functions to execute after each move\r\n  onEnd: (() => void)[]; // List of functions to execute when the game ends\r\n}\r\n\r\nexport default class Game {\r\n  props: GameProps;\r\n  callbacks: Callbacks; // Functions to execute at certain events\r\n  board: Board;\r\n  snakes!: Snake[]; // Complete list of all snakes\r\n  aliveSnakes!: Snake[]; // Sublist of snakes containing only those that are still in-game\r\n  visibleSnakes!: Snake[]; // Sublist of snakes containing only those that are visible to the user\r\n  state: State;\r\n  iteration: number; // Current iteration. An iteration consists in moving every snake 1 unit\r\n  sleepTime: number; // Number of milliseconds to sleep between moves (1000/speed)\r\n\r\n  static defaultProps: GameProps = {\r\n    rows: 25,\r\n    columns: 50,\r\n    snakes: 20,\r\n    visibleSnakes: 20,\r\n    snakeLength: 4,\r\n    spawnMargin: 1,\r\n    wallDensity: 0.07,\r\n    speed: 10,\r\n    scoreService: new DefaultScoreService(),\r\n    brainType: DefaultBrain,\r\n  };\r\n\r\n  constructor(props?: Partial<GameProps>) {\r\n    this.props = { ...Game.defaultProps, ...props };\r\n    this.callbacks = {\r\n      onMove: [],\r\n      onEnd: [],\r\n    };\r\n\r\n    this.board = new Board(this.props.rows, this.props.columns);\r\n    this.addRandomWalls(); // randomly adds obstacles to the board\r\n    this.initSnakes(); // initializes this.snakes, this.aliveSnakes and this.visibleSnakes\r\n\r\n    this.iteration = 0;\r\n    this.state = \"stopped\";\r\n\r\n    this.setSpeed(this.props.speed, false);\r\n    this.sleepTime = this.props.speed ? 1000 / this.props.speed : 0;\r\n  }\r\n\r\n  pause() {\r\n    this.state = \"stopped\";\r\n  }\r\n\r\n  continue() {\r\n    this.state = \"running\";\r\n  }\r\n\r\n  addRandomWalls() {\r\n    for (let row = 0; row < this.props.rows; row++) {\r\n      if (row === 1 || row === this.props.rows - this.props.spawnMargin - 1) continue;\r\n      for (let col = 0; col < this.props.columns; col++) {\r\n        if (col === 1 || col === this.props.columns - this.props.spawnMargin - 1) continue;\r\n        if (!this.board.get([row, col])!.isEmpty()) continue;\r\n\r\n        if (Math.random() < this.props.wallDensity) this.board.addWall([row, col]);\r\n      }\r\n    }\r\n  }\r\n\r\n  removeWalls() {\r\n    this.board.removeWalls();\r\n  }\r\n\r\n  setVisibleSnakes(visibleSnakes: number) {\r\n    this.props.visibleSnakes = visibleSnakes;\r\n    this.updateVisibleSnakes();\r\n  }\r\n\r\n  updateVisibleSnakes() {\r\n    this.visibleSnakes = this.snakes\r\n      .slice(0, this.props.visibleSnakes)\r\n      .filter((snake) => snake.alive);\r\n  }\r\n\r\n  setSpeed(fps: number = Infinity, updateState: boolean = true) {\r\n    this.props.speed = fps;\r\n    this.sleepTime = 1000 / fps;\r\n    if (updateState) this.state = fps > 0 ? \"running\" : \"stopped\";\r\n  }\r\n\r\n  addCallback(event: EventName, callback: (...args: any[]) => void) {\r\n    this.callbacks[event]?.push(callback);\r\n    return this;\r\n  }\r\n\r\n  initSnakes() {\r\n    this.snakes = Array.from({ length: this.props.snakes }, (_, i) => {\r\n      return this.createSnake(i, i);\r\n    });\r\n    // Add snakes to the board\r\n    this.snakes.forEach((snake) => this.board.addSnake(snake));\r\n    // Generate fruits for each snake\r\n    this.snakes.forEach((snake) => (snake.fruit = this.board.addFruit(snake)));\r\n    // Add a neural network to each snake\r\n    if (this.props.neuralNetworks) this.setBrains(this.props.neuralNetworks);\r\n\r\n    this.updateVisibleSnakes();\r\n    this.aliveSnakes = [...this.snakes];\r\n  }\r\n\r\n  // Set a neural network for each snake\r\n  setBrains(neuralNetworks: any[]) {\r\n    if (neuralNetworks.length !== this.props.snakes)\r\n      throw new Error(\"The number of brains does not match the number of snakes\");\r\n\r\n    this.props.neuralNetworks = neuralNetworks;\r\n    for (let i = 0; i < this.props.snakes; i++) {\r\n      if (neuralNetworks[i])\r\n        this.snakes[i].setBrain(neuralNetworks[i], this.board, this.props.brainType);\r\n    }\r\n  }\r\n\r\n  async run() {\r\n    const moveFunction = this.move.bind(this);\r\n    this.state = \"running\" as State;\r\n    while (this.state !== \"ended\") {\r\n      while (this.state === \"stopped\") await sleep(400);\r\n\r\n      const [, elapsedTime] = time(moveFunction);\r\n\r\n      // Wait some time between iterations according to the game speed\r\n      // If the game is running at max speed (fps=Infinity; sleepTime=0), sleep every 50 iterations (ad hoc)\r\n      // so as not to completely block the main thread\r\n      if ((this.visibleSnakes.length && this.sleepTime !== 0) || this.iteration % 50 === 0)\r\n        await sleep(Math.max(this.sleepTime - elapsedTime, 0));\r\n    }\r\n  }\r\n\r\n  reset() {\r\n    this.state = \"stopped\";\r\n    this.iteration = 0;\r\n    const hadWalls = this.board.walls.size > 0;\r\n    this.board.clearObjects();\r\n    if (hadWalls) this.addRandomWalls();\r\n    this.initSnakes();\r\n  }\r\n\r\n  // Game iteration: advance each snake one unit\r\n  move() {\r\n    if (this.state !== \"running\") return;\r\n\r\n    this.iteration++;\r\n    this.aliveSnakes.forEach(this.moveSnake);\r\n    this.callbacks.onMove.forEach((f) => f());\r\n\r\n    if (!this.aliveSnakes.length) {\r\n      this.state = \"ended\";\r\n      this.callbacks.onEnd.forEach((f) => f());\r\n    }\r\n  }\r\n\r\n  // Create a snake placed along the perimeter of the board (with an optional margin: this.props.spawnMargin)\r\n  private createSnake(index: number, id: number): Snake {\r\n    const [width, height] = [\r\n      this.props.columns - 2 * this.props.spawnMargin,\r\n      this.props.rows - 2 * this.props.spawnMargin,\r\n    ];\r\n    const perimeter = width * 2 + height * 2 - 4;\r\n    const vertices = [0, width - 1, width + height - 2, width + height + width - 3, perimeter];\r\n\r\n    const distanceToPosition = (distance: number): [Position, Direction] => {\r\n      distance = distance % perimeter;\r\n      const side = vertices.findIndex((vertex, i) => {\r\n        const nextVertex = vertices[i + 1];\r\n        return nextVertex && vertex <= distance && distance < nextVertex;\r\n      });\r\n      // Define the position relative to the inner rectangle (ignore margins)\r\n      let position: Position, direction: Direction;\r\n      switch (side) {\r\n        case 0:\r\n          position = [0, distance];\r\n          direction = \"right\";\r\n          break;\r\n        case 1:\r\n          position = [distance - width + 1, width - 1];\r\n          direction = \"down\";\r\n          break;\r\n        case 2:\r\n          position = [height - 1, perimeter - height - distance + 1];\r\n          direction = \"left\";\r\n          break;\r\n        case 3:\r\n          position = [perimeter - distance, 0];\r\n          direction = \"up\";\r\n          break;\r\n        default:\r\n          throw new Error(\"Invalid distance.\");\r\n      }\r\n      return [\r\n        [position[0] + this.props.spawnMargin, position[1] + this.props.spawnMargin],\r\n        direction,\r\n      ];\r\n    };\r\n\r\n    const startDistance = Math.floor((index * perimeter) / this.props.visibleSnakes);\r\n    let direction: Direction = \"right\";\r\n    let positions = [];\r\n    for (let i = 0; i < this.props.snakeLength; i++) {\r\n      const squareDistance = startDistance + i;\r\n      const [squarePosition, squareDirection] = distanceToPosition(squareDistance);\r\n      positions.push(squarePosition);\r\n      direction = squareDirection;\r\n    }\r\n    return new Snake(id, positions, direction);\r\n  }\r\n\r\n  private shouldKillSnake(snake: Snake, position: Position) {\r\n    return (\r\n      this.board.outOfBounds(position) || // Position out of bounds of the board\r\n      this.board.get(position)!.hasObstacle(snake) || // Position is an obstacle\r\n      snake.getHistoryCount(position) > 2 // Snake has been in the same position more than two times\r\n    );\r\n  }\r\n\r\n  private getMove(snake: Snake): Move {\r\n    const from = snake.getHead();\r\n    const turn = snake.think();\r\n    const to = snake.getNextPosition();\r\n    const fruit = !!this.board.get(to)?.fruits.has(snake);\r\n    const died = this.shouldKillSnake(snake, to);\r\n    return { from, to, turn, fruit, died } as Move;\r\n  }\r\n\r\n  moveSnake = (snake: Snake) => {\r\n    if (!snake.alive) return; // Snake is already dead (should never happen)\r\n\r\n    const move = this.getMove(snake);\r\n    // Update snake score\r\n    snake.score += this.props.scoreService.getMoveScore(this.board, snake, move);\r\n\r\n    if (move.died) {\r\n      // Snake died\r\n      this.killSnake(snake);\r\n    } else if (move.fruit) {\r\n      // Snake ate a fruit\r\n      snake.extendTo(move.to); // Move and grow the snake\r\n      const newFruit = this.board.addFruit(snake); // Generate a new fruit\r\n      snake.eatFruit(newFruit); // Update counters and set the new fruit\r\n      // Update the board\r\n      this.board.addSnakePosition(snake, move.to);\r\n      this.board.deleteFruit(snake, move.to);\r\n    } else {\r\n      // Regular move (no fruit)\r\n      const oldTail = snake.moveTo(move.to); // Move the snake\r\n      // Update the board\r\n      this.board.addSnakePosition(snake, move.to);\r\n      this.board.removeSnakePosition(snake, oldTail);\r\n    }\r\n  };\r\n\r\n  private killSnake(snake: Snake) {\r\n    snake.alive = false;\r\n    snake.positions.forEach((position) => {\r\n      this.board.get(position)?.snakes.delete(snake);\r\n    });\r\n    this.board.get(snake.fruit)?.fruits.delete(snake);\r\n\r\n    this.aliveSnakes = this.aliveSnakes.filter((aSnake) => aSnake !== snake);\r\n    this.updateVisibleSnakes();\r\n  }\r\n}\r\n","import * as neatap from \"neataptic\";\r\nimport Game from \"./Game\";\r\nimport Brain from \"./Brain\";\r\n\r\ntype State = \"running\" | \"stopped\";\r\ntype EventName = \"preGen\" | \"postGen\";\r\n\r\nexport interface Parameters {\r\n  popsize: number; // This value is overwritten by game.props.snakes\r\n  elitism: number;\r\n  mutationRate: number;\r\n  mutationAmount: number;\r\n  // This means the fitness function takes the whole population as input.\r\n  fitnessPopulation: true;\r\n  network?: any; // Network structure\r\n}\r\n\r\ninterface Callbacks {\r\n  preGen: (() => void)[]; // List of functions to execute before each generation\r\n  postGen: (() => void)[]; // List of functions to execute after each generation\r\n}\r\n\r\nexport default class Evolver {\r\n  game: Game;\r\n  params: Parameters;\r\n  brainType: typeof Brain;\r\n  neat: any; // neataptic.Neat\r\n  generation: number;\r\n  state: State;\r\n  callbacks: Callbacks;\r\n\r\n  constructor(game: Game, params?: Partial<Parameters>) {\r\n    if (game.props.snakes! < 2) throw new Error(\"Popsize must be at least 2\");\r\n    this.game = game;\r\n    this.brainType = (this.game.props.brainType as unknown) as typeof Brain;\r\n    this.callbacks = {\r\n      preGen: [],\r\n      postGen: []\r\n    };\r\n\r\n    this.params = { ...this.defaultParams(), ...params };\r\n    this.neat = new neatap.Neat(\r\n      this.brainType.inputSize, // NN inputs\r\n      this.brainType.outputSize, // NN outputs\r\n      this.evaluatePopulation.bind(this), // Evaluation function\r\n      this.params\r\n    );\r\n    this.generation = 0;\r\n    this.state = \"stopped\";\r\n  }\r\n\r\n  defaultParams(): Parameters {\r\n    return {\r\n      popsize: this.game.props.snakes,\r\n      elitism: Math.round(0.2 * this.game.props.snakes),\r\n      mutationRate: 0.3,\r\n      mutationAmount: 1,\r\n      fitnessPopulation: true,\r\n      // network: this.createNetwork()\r\n    };\r\n  }\r\n\r\n  // Constructs an initial network\r\n  createNetwork(): any {\r\n    return new neatap.architect.Perceptron(\r\n      this.brainType.inputSize, // inputs\r\n      5, // Neurons in hidden layer 1\r\n      this.brainType.outputSize // outputs\r\n    )\r\n  }\r\n\r\n  addCallback(event: EventName, callback: (...args: any[]) => void) {\r\n    this.callbacks[event].push(callback);\r\n    return this;\r\n  }\r\n\r\n  removeCallback(event: EventName, callback: (...args: any[]) => void) {\r\n    this.callbacks[event] = this.callbacks[event].filter(cb => cb !== callback);\r\n    return this;\r\n  }\r\n\r\n  setBrains() {\r\n    this.game.setBrains(this.neat.population);\r\n  }\r\n\r\n  // Neataptic puts elites at the end; \r\n  // this is a hack to put them at the top of the list\r\n  sortPopulation() {\r\n    let population: any[] = []\r\n    for(let i = this.params.popsize - this.params.elitism; i < this.params.popsize; i++) {\r\n      population.push(this.neat.population[i]);\r\n    }\r\n    for(let i = 0; i < this.params.popsize - this.params.elitism; i++) {\r\n      population.push(this.neat.population[i]);\r\n    }\r\n    this.neat.population = population;\r\n  }\r\n\r\n  async evaluatePopulation(population: any[]) {\r\n    this.game.setBrains(this.neat.population); // Associate each neural network with the respective snake\r\n    await this.game.run();\r\n    for (let i = 0; i < this.params.popsize!; i++) {\r\n      population[i].score = this.game.snakes[i].score;\r\n    }\r\n  }\r\n\r\n  async run() {\r\n    this.state = \"running\";\r\n    while (this.state === \"running\") {\r\n      this.generation += 1;\r\n      this.callbacks.preGen.forEach(f => f());\r\n      await this.neat.evolve();\r\n      this.sortPopulation();\r\n      this.callbacks.postGen.forEach(f => f());\r\n      this.game.reset();\r\n    }\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport { Typography, CardContent } from \"@material-ui/core\";\r\n\r\ninterface Props {\r\n  title: string;\r\n  content: string | number;\r\n}\r\n\r\nexport default class StatCard extends React.Component<Props> {\r\n  render() {\r\n    return (\r\n      <Card className=\"stat-card\">\r\n        <CardContent>\r\n          <Typography\r\n            className=\"stat-card-title\"\r\n            color=\"textSecondary\"\r\n            variant=\"button\"\r\n            gutterBottom\r\n          >\r\n            {this.props.title}\r\n          </Typography>\r\n          <Typography variant=\"h5\">\r\n            {this.props.content}\r\n          </Typography>\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport Evolver from \"../logic/Evolver\";\r\nimport StatCard from \"./StatCard\";\r\nimport Game from \"../logic/Game\";\r\n\r\ninterface Props {\r\n  evolver: Evolver;\r\n}\r\n\r\ninterface State {\r\n  generation: number;\r\n  highScore: number;\r\n}\r\n\r\nexport default class StatCards extends React.Component<Props, State> {\r\n  evolver: Evolver;\r\n  game: Game;\r\n\r\n  constructor(props: Props) {\r\n    super(props);\r\n    this.state = {\r\n      generation: 0,\r\n      highScore: 0,\r\n    };\r\n    // aliases\r\n    this.evolver = this.props.evolver;\r\n    this.game = this.evolver.game;\r\n    // add callbacks\r\n    this.evolver.addCallback(\"preGen\", this.preGenHandler);\r\n    this.evolver.addCallback(\"postGen\", this.postGenHandler);\r\n  }\r\n\r\n  preGenHandler = () => {\r\n    this.setState({\r\n      generation: this.evolver.generation,\r\n    });\r\n  };\r\n\r\n  postGenHandler = () => {\r\n    const generationHighScore = Math.max(...this.game.snakes.map((snake) => snake.fruits));\r\n    if (generationHighScore > this.state.highScore) {\r\n      this.setState({\r\n        highScore: generationHighScore,\r\n      });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"stat-cards\">\r\n        <StatCard title={\"High Score\"} content={this.state.highScore}></StatCard>\r\n        <StatCard title={\"Generation\"} content={this.state.generation}></StatCard>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { Slider } from \"@material-ui/core\";\r\nimport Switch from \"@material-ui/core/Switch\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport FormGroup from \"@material-ui/core/FormGroup\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\n\r\ninterface Props {\r\n  onSpeedChange?: (speed: number) => void;\r\n  onFastForwardToggle?: (fastForward: boolean, speed: number | undefined) => void;\r\n  onSnakeSelect?: (value: number) => void;\r\n  onWallsToggle?: (walls: boolean) => void;\r\n}\r\n\r\ninterface State {\r\n  fastForward: boolean;\r\n}\r\n\r\nexport default class Controls extends Component<Props, State> {\r\n  static defaults = {\r\n    speed: 10,\r\n    snakes: 10,\r\n  };\r\n  speed: number;\r\n\r\n  constructor(props: Props) {\r\n    super(props);\r\n    this.state = { fastForward: false };\r\n    this.speed = Controls.defaults.speed;\r\n  }\r\n\r\n  toggleFastForward = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    const fastForward = event.target.checked;\r\n    this.props.onFastForwardToggle?.(fastForward, this.speed);\r\n    this.setState({ fastForward: fastForward });\r\n  };\r\n\r\n  sliderHandler = (_event: React.ChangeEvent<{}>, value: number | number[]) => {\r\n    const speed = value as number;\r\n    this.speed = speed;\r\n    this.props.onSpeedChange?.(speed);\r\n  };\r\n\r\n  handleSnakeSelect = (event: React.ChangeEvent<{ name?: string | undefined; value: unknown }>) => {\r\n    this.props.onSnakeSelect?.(event.target.value as number);\r\n  };\r\n\r\n  toggleWalls = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    const walls = event.target.checked;\r\n    this.props.onWallsToggle?.(walls);\r\n  };\r\n\r\n  render() {\r\n    const speedSlider = (\r\n      <Slider\r\n        className=\"speed-slider\"\r\n        valueLabelFormat={(value) => {\r\n          return `${value}x`;\r\n        }}\r\n        valueLabelDisplay=\"auto\"\r\n        defaultValue={Controls.defaults.speed}\r\n        min={0}\r\n        max={100}\r\n        onChange={this.sliderHandler}\r\n        disabled={this.state.fastForward}\r\n      />\r\n    );\r\n    const fastForwardSwitch = (\r\n      <Switch\r\n        className=\"ff-switch\"\r\n        checked={this.state.fastForward}\r\n        onChange={this.toggleFastForward}\r\n      />\r\n    );\r\n    const snakeVisibilitySelect = (\r\n      <Select\r\n        className=\"snake-select\"\r\n        onChange={this.handleSnakeSelect}\r\n        defaultValue={Controls.defaults.snakes}\r\n        disabled={this.state.fastForward}\r\n      >\r\n        <MenuItem value={1}>Top 1</MenuItem>\r\n        <MenuItem value={3}>Top 3</MenuItem>\r\n        <MenuItem value={5}>Top 5</MenuItem>\r\n        <MenuItem value={10}>Top 10</MenuItem>\r\n        <MenuItem value={20}>Top 20</MenuItem>\r\n      </Select>\r\n    );\r\n    const wallSwitch = (\r\n      <Switch className=\"wall-switch\" defaultChecked onChange={this.toggleWalls} />\r\n    );\r\n    return (\r\n      <FormGroup row className=\"controls\">\r\n        <div className=\"left\">\r\n          <FormControlLabel label=\"Fast Forward\"\r\n            control={fastForwardSwitch}\r\n            labelPlacement=\"start\"\r\n          />\r\n          <FormControlLabel label=\"Speed\" control={speedSlider} labelPlacement=\"start\" />\r\n          <FormControlLabel label=\"Show\" control={snakeVisibilitySelect} labelPlacement=\"start\" />\r\n        </div>\r\n        <div className=\"right\">\r\n          <FormControlLabel label=\"Obstacles\" control={wallSwitch} labelPlacement=\"end\" />\r\n        </div>\r\n      </FormGroup>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport GameCanvas from \"./GameCanvas\";\r\nimport EvolutionPlot from \"./EvolutionPlot\";\r\nimport Help from \"./Help\"\r\nimport Game from \"../logic/Game\";\r\nimport Evolver from \"../logic/Evolver\";\r\nimport StatCards from \"./StatCards\";\r\nimport Controls from \"./Controls\";\r\nimport { CloseObstaclesAndFruitVectorBrain } from \"../logic/Brain\";\r\nimport { FruitsScoreService } from \"../logic/ScoreService\";\r\n\r\nimport \"./App.css\";\r\n\r\ninterface State {\r\n  snakes: number;\r\n}\r\n\r\nexport default class App extends React.Component<{}, State> {\r\n  game: Game;\r\n  evolver: Evolver;\r\n\r\n  constructor(props: {}) {\r\n    super(props);\r\n    this.state = {\r\n      snakes: Controls.defaults.snakes,\r\n    };\r\n    this.game = new Game({\r\n      rows: 20,\r\n      columns: 40,\r\n      snakes: 100,\r\n      visibleSnakes: Controls.defaults.snakes,\r\n      speed: Controls.defaults.speed,\r\n      snakeLength: 4,\r\n      scoreService: new FruitsScoreService(),\r\n      brainType: CloseObstaclesAndFruitVectorBrain,\r\n    });\r\n    this.evolver = new Evolver(this.game);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.evolver.run();\r\n  }\r\n\r\n  speedChangeHandler = (speed: number) => {\r\n    this.game.setSpeed(speed);\r\n  };\r\n\r\n  fastForwardHandler = (fastForward: boolean, speed: number | undefined) => {\r\n    const newSpeed = fastForward ? Infinity : speed;\r\n    this.game.setSpeed(newSpeed);\r\n  };\r\n\r\n  snakeSelectHandler = (snakes: number) => {\r\n    this.game.setVisibleSnakes(snakes);\r\n    this.setState({ snakes: snakes });\r\n  };\r\n\r\n  wallsHandler = (walls: boolean) => {\r\n    if (walls) this.game.addRandomWalls();\r\n    else this.game.removeWalls();\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"app\">\r\n        <Help game={this.game}/>\r\n        <div id=\"stats\">\r\n          <StatCards evolver={this.evolver} />\r\n          <EvolutionPlot evolver={this.evolver} />\r\n        </div>\r\n        <div id=\"game-container\">\r\n          <Controls\r\n            onSpeedChange={this.speedChangeHandler}\r\n            onFastForwardToggle={this.fastForwardHandler}\r\n            onSnakeSelect={this.snakeSelectHandler}\r\n            onWallsToggle={this.wallsHandler}\r\n          />\r\n          <GameCanvas width={1000} height={500} game={this.game} snakes={this.state.snakes} />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport \"./index.css\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\nimport { Route, Switch } from \"react-router-dom\";\r\nimport App from \"./components/App\";\r\nimport NotFound from \"./components/NotFound\";\r\n\r\nReactDOM.render(\r\n  <BrowserRouter basename={process.env.REACT_APP_BASE_PATH}>\r\n    <Switch>\r\n      <Route path=\"/\" exact component={App} />\r\n      <Route component={NotFound} />\r\n    </Switch>\r\n  </BrowserRouter>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","import React from \"react\";\r\n\r\nexport default function NotFound() {\r\n  return (\r\n    <div id=\"not-found\">\r\n      <h1>Page not found</h1>\r\n    </div>\r\n  );\r\n}\r\n"],"sourceRoot":""}